name: DevSecOps Pipeline CI/CD

on:
  push:
    branches: [ main ] # Aciona o workflow em pushes para a branch main
  pull_request:
    branches: [ main ] # Também aciona em pull requests para a main

jobs:
  build-and-scan:
    name: Build e Análise de Segurança
    runs-on: ubuntu-latest # O job rodará em uma máquina virtual Linux

    steps:
      # Passo 1: Fazer o checkout do código do repositório
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Necessário para o SonarCloud analisar o histórico

      # Passo 2: Configurar o ambiente Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar dependências
        run: npm install

      # Passo 3: Análise de Dependências com Snyk (SCA)
      - name: Rodar Snyk para encontrar vulnerabilidades em dependências
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      # Passo 4: Análise de Código Estático com SonarCloud.
      - name: Rodar SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Lageota_nodesecops-github-actions
            -Dsonar.organization=lageota

  deploy:
        name: Deploy para Produção
        needs: build-and-scan
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        runs-on: ubuntu-latest

        steps:
          - name: Checkout código
            uses: actions/checkout@v3

          - name: Empacotar aplicação para deploy
            run: zip -r release.zip . -x ".git/*" ".github/*" "node_modules/*"

          
          - name: Copiar pacote para o servidor
            uses: appleboy/scp-action@917f8b81dfc1ccd331fef9e2d61bdc6c8be94634
            with:
              host: ${{ secrets.VPS_HOST }}
              username: ${{ secrets.VPS_USERNAME }}
              key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
              source: "release.zip"
              target: "/tmp" # Copiamos para uma pasta temporária segura

          
          - name: Instalar e reiniciar a aplicação no servidor
            uses: appleboy/ssh-action@master
            with:
              host: ${{ secrets.VPS_HOST }}
              username: ${{ secrets.VPS_USERNAME }}
              key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
              script: |
                
                APP_DIR="/usr/local/lsws/Example/html/node"
                WEB_USER="nobody"
                WEB_GROUP="nogroup"

                echo "Garantindo que o diretório ${APP_DIR} exista..."
                sudo mkdir -p ${APP_DIR}

                
                echo "Movendo o pacote de /tmp para ${APP_DIR}..."
                sudo mv /tmp/release.zip ${APP_DIR}/release.zip

                
                cd ${APP_DIR}
                echo "Diretório atual: $(pwd)"

                
                echo "Descompactando a aplicação..."
                sudo unzip -o release.zip

                
                echo "Removendo o arquivo zip..."
                sudo rm release.zip

                
                echo "Instalando dependências..."
                sudo npm install --production --prefix ${APP_DIR}

                
                echo "Ajustando permissões para ${WEB_USER}:${WEB_GROUP}..."
                sudo chown -R ${WEB_USER}:${WEB_GROUP} ${APP_DIR}

                export PM2_HOME=${APP_DIR}/.pm2

                echo "Reiniciando a aplicação com PM2..."

                sudo -E PM2_HOME=${APP_DIR}/.pm2 -u ${WEB_USER} pm2 restart nodesecops-app || sudo -E PM2_HOME=${APP_DIR}/.pm2 -u ${WEB_USER} pm2 start app.js --name nodesecops-app

                sudo -E PM2_HOME=${APP_DIR}/.pm2 -u ${WEB_USER} pm2 save

                echo "Deploy concluído com sucesso!"
