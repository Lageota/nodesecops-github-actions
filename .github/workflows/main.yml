name: DevSecOps Pipeline CI/CD

on:
  push:
    branches: [ main ] # Aciona o workflow em pushes para a branch main
  pull_request:
    branches: [ main ] # Também aciona em pull requests para a main

jobs:
  build-and-scan:
    name: Build e Análise de Segurança
    runs-on: ubuntu-latest # O job rodará em uma máquina virtual Linux

    steps:
      # Passo 1: Fazer o checkout do código do repositório
      - name: Checkout código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Necessário para o SonarCloud analisar o histórico

      # Passo 2: Configurar o ambiente Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar dependências
        run: npm install

      # Passo 3: Análise de Dependências com Snyk (SCA)
      - name: Rodar Snyk para encontrar vulnerabilidades em dependências
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

      # Passo 4: Análise de Código Estático com SonarCloud
      - name: Rodar SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Lageota_nodesecops-github-actions
            -Dsonar.organization=Lageota

  deploy:
        name: Deploy para Produção
        needs: build-and-scan
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        runs-on: ubuntu-latest

        steps:
          - name: Checkout código
            uses: actions/checkout@v3

          - name: Setup Node.js e criar artefato
            uses: actions/setup-node@v3
            with:
              node-version: '18'
          - run: npm install
          - run: zip -r release.zip . -x ".git/*" ".github/*"

          # ETAPA ATUALIZADA
          - name: Deploy para Servidor LiteSpeed
            uses: appleboy/ssh-action@master
            with:
              host: ${{ secrets.VPS_HOST }}
              username: ${{ secrets.VPS_USERNAME }}
              key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
              script: |
                # Variáveis para facilitar a manutenção
                APP_DIR="/usr/local/lsws/Example/html/node"
                WEB_USER="nobody"
                WEB_GROUP="nogroup"

                echo "Garantindo que o diretório ${APP_DIR} exista..."
                mkdir -p ${APP_DIR}

                echo "Movendo o pacote para o diretório da aplicação..."
                mv release.zip ${APP_DIR}/

                cd ${APP_DIR}
                echo "Descompactando a aplicação em $(pwd)..."
                unzip -o release.zip

                echo "Instalando dependências de produção..."
                npm install --production

                echo "Ajustando permissões para o usuário ${WEB_USER}:${WEB_GROUP}..."
                chown -R ${WEB_USER}:${WEB_GROUP} ${APP_DIR}

                echo "Reiniciando a aplicação com PM2..."
                sudo -u ${WEB_USER} pm2 restart nodesecops-app || sudo -u ${WEB_USER} pm2 start app.js --name nodesecops-app

                echo "Deploy concluído com sucesso!"
